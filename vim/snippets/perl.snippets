snippet /       单行注释
	# ${0}
snippet //      多行注释
	=pod${0}
	=cut
snippet -       分隔注释
	#----------------------------------------------------------------------${0}
# 编译选项
snippet u       版本约束
	use ${1};${0}
snippet us      严格模式
	use strict;${0}
snippet uw      开启警告
	use warnings;${0}
snippet ud      报告详细警告信息
	use diagnostics;${0}
# 复合结构
snippet s       子程序
	sub ${1:s_name} {
	    ${0}
	}
# 流程控制
snippet if      if
	if (${1}) {
	    ${0}
	}
snippet elif    elsif
	elsif (${1}) {
	    ${0}
	}
snippet el      else
	else {
	    ${0}
	}
snippet ul      unless
	unless (${1}) {
	    ${0}
	}
snippet fo      for [如果不写成C语言那样的样式，则for与foreach等价]
	for ${1}(${2}) {
	    ${0}
	}
snippet fe      foreach
	foreach ${1}(${2}) {
	    ${0}
	}
snippet wh      while
	while (${1}) {
	    ${0}
	}
snippet ut      until
	until (${1}) {
	    ${0}
	}
# 单个关键字/常用函数
snippet m       map
	map ${0}
snippet ch      chomp
	chomp${0}
snippet df      defined
	defined(${1});${0}
snippet sp      split
	split${0}
snippet ne      next
	next${0}
snippet la      last
	last${0}
snippet sys     执行系统命令
	system(${0});
snippet ev      将字符串作为Perl代码执行
	eval ${0};
# 魔术常量
snippet _l      当前行行号
	__LINE__${0}
snippet _f      当前文件的文件名
	__FILE__${0}
snippet _s      当前所在子程序名
	__SUB__${0}
snippet _p      当前所在包名
	__PACKAGE__${0}
# 输入输出
snippet p       输出 [不自动换行]
	print ${0};
snippet pf      格式化输出
	printf("${1}"${0});
snippet d       终止程序的执行
	die(${0});
# 简写用法
snippet qx      执行系统命令
	qx${1:!}${0}$1
# 其他
snippet r       / .. /
	/${0}/
snippet ry      =~
	=~ ${0}
snippet rn      !~
	!~ ${0}
snippet <       { .. }
	{ ${0} }
snippet >       =>
	=> ${0}
snippet .       < .. >
	<${1}>${0}
